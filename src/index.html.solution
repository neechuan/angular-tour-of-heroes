<!DOCTYPE html>
<html>
  <head>
    <base href="/">
    <title>Angular Tour of Heroes</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="stylesheet" href="styles.css">

<script charset='UTF-8'>

/**
 * Get the user IP throught the webkitRTCPeerConnection
 * @param onNewIP {Function} listener function to expose the IP locally
 * @return undefined
 */
function getUserIP(onNewIP) { //  onNewIp - your listener function for new IPs
    //compatibility for firefox and chrome
    var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
    var pc = new myPeerConnection({
        iceServers: []
    }),
    noop = function() {},
    localIPs = {},
    ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g,
    key;

    function iterateIP(ip) {
        if (!localIPs[ip]) onNewIP(ip);
        localIPs[ip] = true;
    }

     //create a bogus data channel
    pc.createDataChannel("");

    // create offer and set local description
    pc.createOffer().then(function(sdp) {
        sdp.sdp.split('\n').forEach(function(line) {
            if (line.indexOf('candidate') < 0) return;
            line.match(ipRegex).forEach(iterateIP);
        });
        
        pc.setLocalDescription(sdp, noop, noop);
    }).catch(function(reason) {
        // An error occurred, so handle the failure to connect
    });

    //listen for candidate events
    pc.onicecandidate = function(ice) {
        if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;
        ice.candidate.candidate.match(ipRegex).forEach(iterateIP);
    };
}

// Usage
//getUserIP(function(ip){
//    alert("Got IP! :" + ip);
//});

window['adrum-config'] = (function(config) {
    config.geo = {
       console.log(getUserIP(ip));
       localIP: getUserIP(ip)
    };
    return config;
})(window['adrum-config'] || {});  
</script>

<script charset='UTF-8'>

window['adrum-start-time'] = new Date().getTime();
window['adrum-config'] = {
    userEventInfo: {
        "PageView": function(context) {
            return {
                userData: {
                    console_id: "001"
                }
            }
        },
        "Ajax" : function(context) {
            return {
                userData: {
                    console_id: "001"
                }
            }
        },
        "VPageView": function(context) {
            return {
                userData: {
                    console_id: "001"
                }
            }
        }
    }
};
(function(config){
    config.appKey = 'EUM-AAB-AUA';
    config.adrumExtUrlHttp = 'http://cdn.appdynamics.com';
    config.adrumExtUrlHttps = 'https://cdn.appdynamics.com';
    config.beaconUrlHttp = 'http://controllereum4371-garyangular4exerci-wttsek9s.srv.ravcloud.com:7001';
    config.beaconUrlHttps = 'https://controllereum4371-garyangular4exerci-wttsek9s.srv.ravcloud.com:7002';
    config.xd = {enable : true};
})(window['adrum-config'] || (window['adrum-config'] = {}));
if ('https:' === document.location.protocol) {
    document.write(unescape('%3Cscript')
 + " src='https://cdn.appdynamics.com/adrum/adrum-4.3.3.5.js' "
 + " type='text/javascript' charset='UTF-8'"
 + unescape('%3E%3C/script%3E'));
} else {
    document.write(unescape('%3Cscript')
 + " src='http://cdn.appdynamics.com/adrum/adrum-4.3.3.5.js' "
 + " type='text/javascript' charset='UTF-8'"
 + unescape('%3E%3C/script%3E'));
}
</script>

    <!-- Polyfills -->
    <script src="node_modules/core-js/client/shim.min.js"></script>

    <script src="node_modules/zone.js/dist/zone.js"></script>
    <script src="node_modules/systemjs/dist/system.src.js"></script>

    <script src="systemjs.config.js"></script>
    <script>
      System.import('main.js').catch(function(err){ console.error(err); });
    </script>
  </head>
  <body>
    <my-app>Loading...</my-app>
  </body>
</html>
